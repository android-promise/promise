// Generated by Dagger (https://google.github.io/dagger).
package promise.app_base.models.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DieselEngineModule_ProvidesEngineFactory implements Factory<Engine> {
  private final DieselEngineModule module;

  private final Provider<DieselEngine> engineProvider;

  public DieselEngineModule_ProvidesEngineFactory(DieselEngineModule module,
      Provider<DieselEngine> engineProvider) {
    this.module = module;
    this.engineProvider = engineProvider;
  }

  @Override
  public Engine get() {
    return providesEngine(module, engineProvider.get());
  }

  public static DieselEngineModule_ProvidesEngineFactory create(DieselEngineModule module,
      Provider<DieselEngine> engineProvider) {
    return new DieselEngineModule_ProvidesEngineFactory(module, engineProvider);
  }

  public static Engine providesEngine(DieselEngineModule instance, DieselEngine engine) {
    return Preconditions.checkNotNull(instance.providesEngine(engine), "Cannot return null from a non-@Nullable @Provides method");
  }
}
