// Generated by Dagger (https://google.github.io/dagger).
package promise.app_base.data.net;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import promise.data.net.net.FastParserEngine;

public final class BaseApi_ProvideAuthApiFactory implements Factory<AuthApi> {
  private final Provider<FastParserEngine> fastParserEngineProvider;

  public BaseApi_ProvideAuthApiFactory(Provider<FastParserEngine> fastParserEngineProvider) {
    this.fastParserEngineProvider = fastParserEngineProvider;
  }

  @Override
  public AuthApi get() {
    return provideAuthApi(fastParserEngineProvider.get());
  }

  public static BaseApi_ProvideAuthApiFactory create(
      Provider<FastParserEngine> fastParserEngineProvider) {
    return new BaseApi_ProvideAuthApiFactory(fastParserEngineProvider);
  }

  public static AuthApi provideAuthApi(FastParserEngine fastParserEngine) {
    return Preconditions.checkNotNull(BaseApi.provideAuthApi(fastParserEngine), "Cannot return null from a non-@Nullable @Provides method");
  }
}
