// Generated by Dagger (https://google.github.io/dagger).
package promise.app_base.data.net;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import promise.data.net.net.FastParserEngine;

public final class BaseApi_ProvideTodoApiFactory implements Factory<TodoApi> {
  private final Provider<FastParserEngine> fastParserEngineProvider;

  public BaseApi_ProvideTodoApiFactory(Provider<FastParserEngine> fastParserEngineProvider) {
    this.fastParserEngineProvider = fastParserEngineProvider;
  }

  @Override
  public TodoApi get() {
    return provideTodoApi(fastParserEngineProvider.get());
  }

  public static BaseApi_ProvideTodoApiFactory create(
      Provider<FastParserEngine> fastParserEngineProvider) {
    return new BaseApi_ProvideTodoApiFactory(fastParserEngineProvider);
  }

  public static TodoApi provideTodoApi(FastParserEngine fastParserEngine) {
    return Preconditions.checkNotNull(BaseApi.provideTodoApi(fastParserEngine), "Cannot return null from a non-@Nullable @Provides method");
  }
}
